package com.example.tests;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Random;

import org.testng.annotations.AfterTest;
import org.testng.annotations.BeforeTest;
import org.testng.annotations.DataProvider;

import com.example.fw.ApplicationManager;


public class BaseForTests {
	
 protected ApplicationManager app;	

 @BeforeTest
 public void setUp() throws Exception {
	    app = new ApplicationManager();
	  }
 
 @AfterTest
 public void tearDown() throws Exception {
	    app.stop();		
	  }
	
 @DataProvider
 public Iterator<Object[]> randomValidGroupGenerator(){ 
 	List<Object[]> list = new ArrayList<Object[]>();//Object[] произвольный массив объектов - двумерный. будет потом передаваться, как набор
 	//параметров (могут иметь произвольные типы). В нашем случае - список наборов из одного элемента
 	//iterator должен сгенерировать список наборов из произвольных объектов в количестве, необходимом тестовому методу
 	for (int i = 0;i<5;i++) {
 		GroupData group = new GroupData()
 			.withName(generateRandomString())
 			.withHeader(generateRandomString())
 			.withFooter(generateRandomString());
 		list.add(new Object[]{group});
 	}
 	return list.iterator();
	
}

@DataProvider
 public Iterator<Object[]> randomValidContactGenerator(){ 
 	List<Object[]> list = new ArrayList<Object[]>();//Object[] произвольный массив объектов - двумерный. будет потом передаваться, как набор
 	//параметров (могут иметь произвольные типы). В нашем случае - список наборов из одного элемента
 	//iterator должен сгенерировать список наборов из произвольных объектов в количестве, необходимом тестовому методу	
 	for (int i = 0;i<3;i++) {
 		ContactData contact = new ContactData()
 			.withFirstName(generateRandomString())
 			.withLastName(generateRandomString())
 			.withAddress(generateRandomString())
 			.withTelHome(generateRandomString())
 			.withTelMobile(generateRandomString())
 			.withTelWork(generateRandomString())
 			.withEmail1(generateRandomString())
 			.withEmail2(generateRandomString())
 			.withBirthDay(selectValidBDay())
 			.withBirthMonth(selectValidBMonth())
 			.withBirthYear(generateValidBYear())
 		 	.withAddressSecondary(generateRandomString())
 			.withTelSecondary(generateRandomString());
 		
 		//contact.relatedGroup = selectRandomGroup();
 		list.add(new Object[]{contact});   
 	}
 	
 	return list.iterator();
 }

/*public String generateRandomString(){
	Random rnd = new Random();	
	int r = rnd.nextInt(4); 	
	if(r==0){
		return "";	
	}else if(r==1){
	   return null;
     }   else{
		 return "text"+rnd.nextInt();
		}
	}
*/	
 public String generateRandomString(){
		Random rnd = new Random();		
		if(rnd.nextInt(4)==0){
			return "";	
		} else{
			 return "text"+rnd.nextInt();
			}
		}
 
 public String generateValidBYear(){
		Random rnd = new Random();		
		String year = "19";
		int r = rnd.nextInt(9);
		if(r<4){
			r=r+4;
			return year+r+rnd.nextInt(9);	
		} else{			
			return year+r+rnd.nextInt(9);
			}
		}

 public String selectValidBMonth(){
	 Random rnd = new Random();
	 //int r = rnd.nextInt(12)+1;  //random value between [0, 11] +1 to exclude 0 and include 12
	int r=rnd.nextInt(app.getContactHelper().getMonths().length-1);
	 return app.getContactHelper().getMonths()[r];	
	}
 
 public String selectValidBDay(){
	 Random rnd = new Random();
	 int r=rnd.nextInt(app.getContactHelper().getDays().length-1);
	 return app.getContactHelper().getDays()[r];	

	} 
}

