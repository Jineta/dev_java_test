package com.example.fw;

import java.util.concurrent.TimeUnit;

import org.openqa.selenium.Alert;
import org.openqa.selenium.By;
import org.openqa.selenium.NoAlertPresentException;
import org.openqa.selenium.NoSuchElementException;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.firefox.FirefoxDriver;
import org.openqa.selenium.htmlunit.HtmlUnitDriver;
import org.openqa.selenium.ie.InternetExplorerDriver;
import org.openqa.selenium.support.ui.Select;
import org.openqa.selenium.support.ui.WebDriverWait;

public abstract class WebDriverHelper {

	private static WebDriver driver;
	private StringBuffer verificationErrors = new StringBuffer();
	private final ApplicationManager manager;

	public WebDriverHelper(ApplicationManager pManager) {
		this.manager = pManager;
		String browser = manager.getProperty("browser");
				 if ("firefox".equals(browser)){
					 driver = new FirefoxDriver(); 
				 } else if ("ie".equals(browser)){
					 driver = new InternetExplorerDriver();  
				 } else if ("chrome".equals(browser)){
			        driver = new ChromeDriver();
				 } else {
				    driver = new HtmlUnitDriver();
				 }
				 
				 driver.manage().timeouts().implicitlyWait(15, TimeUnit.SECONDS);
				//driver.get(baseUrl);
			
		return driver;
		}
	
	protected void openUrl (String string){
		driver.get(manager.getProperty("baseUrl")+string);
	}
	public boolean isElementPresent(By by) {
	    try {
	      driver.findElement(by);
	      return true;
	    } catch (NoSuchElementException e) {
	      return false;
	    }
	  }

	public boolean isAlertPresent() {
	    try {
	      driver.switchTo().alert();
	      return true;
	    } catch (NoAlertPresentException e) {
	      return false;
	    }
	  }

	public String closeAlertAndGetItsText() {
	    try {
	      Alert alert = driver.switchTo().alert();
	      String alertText = alert.getText();
	      if (acceptNextAlert) {
	        alert.accept();
	      } else {
	        alert.dismiss();
	      }
	      return alertText;
	    } finally {
	     acceptNextAlert = true;
	    }
	  }

	protected void type(By locator, String text) {
		if (text != null) {
		driver.findElement(locator).clear();
		driver.findElement(locator).sendKeys(text);	
		}
	}
	protected void click(By locator) {
		driver.findElement(locator).click();
	}

	protected void selectByText(By locator, String text) {
		if (text != null){
		new Select(driver.findElement(locator)).selectByVisibleText(text);
		}
		}
	}

