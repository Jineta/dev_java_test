package com.example.tests;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import org.testng.annotations.DataProvider;

public class GroupData implements Comparable<GroupData>{ //there is an opportunity to compare GroupData objects
	
	protected BaseForTests baseTest;//
	public String name;
	public String header;
	public String footer;

	public GroupData() {
		 name = null;
		 header = null;
		 footer = null;
	}

//SET methods
/*public void setName(String pname){
	name= pname;	
	}
public void setHeader(String pheader){
	header = pheader;	
	}
public void setFooter(String pfooter){
	footer = pfooter;	
    }*/

@Override // helps to optimize (if hashCodes aren't equal we stop compare). Else - goto equals method
public int hashCode() {
	final int prime = 31;
	int result = 1;
	//result = prime * result + ((name == null) ? 0 : name.hashCode()); //temporary comment
	return result;
}

@Override //automatically converts object GroupData to string - > good presentation of test results
public String toString() {
	return "GroupData [name=" + name + ", header=" + header + ", footer="
			+ footer + "]";
}

@Override   //compares objects
public boolean equals(Object obj) {
	if (this == obj)
		return true;
	if (obj == null)
		return false;
	if (getClass() != obj.getClass())
		return false;
	GroupData other = (GroupData) obj;
	if (name == null) {
		if (other.name != null)
			return false;
	} else if (!name.equals(other.name))
		return false;
	return true;
}

@Override  // a.compareTo( b ) -- если отрицательное число, значит a <b, если ноль -- равны, если положительное то a > b
//нет, boolean недостаточно. это для метода equals, который просто говорит "равны или не равны" 
//а метод compareTo говорит "меньше, равно или больше"
public int compareTo(GroupData other) {
	return this.name.toLowerCase().compareTo(other.name.toLowerCase());
}// рРо Рро комбинации

@DataProvider
public Iterator<Object[]> randomValidGroupGenerator(){ 
	List<Object[]> list = new ArrayList<Object[]>();//Object[] произвольный массив объектов - двумерный. будет потом передаваться, как набор
	//параметров (могут иметь произвольные типы). В нашем случае - список наборов из одного элемента
	//iterator должен сгенерировать список наборов из произвольных объектов в количестве, необходимом тестовому методу
	for (int i = 0;i<5;i++) {
		GroupData group = new GroupData();
		group.name = baseTest.generateRandomString();
		group.header= baseTest.generateRandomString();
		group.footer= baseTest.generateRandomString();	 
		list.add(new Object[]{group});
	}
	return list.iterator();
}

}

