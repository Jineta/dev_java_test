package com.example.fw;

import java.util.ArrayList;
import java.util.List;

import org.openqa.selenium.By;
import org.openqa.selenium.WebElement;

import com.example.tests.ContactData;

public class ContactHelper extends HelperBase {
    public static boolean CREATION = true;
    public static boolean MODIFICATION = false;
	
	public ContactHelper(ApplicationManager pManager) {
		super(pManager);		
	}
	
	public List<ContactData> getContacts() {
		List<ContactData> contacts = new ArrayList<ContactData>();//implementation of List type
		
		manager.navigateTo().mainPage();
		List<WebElement> lines = driver.findElements(By.xpath("//table/tbody/tr[position()>1 and position()!=last()]"));// method findElements returns all elements which correspond selected locator
		for (WebElement line : lines) {		
			String firstname= line.findElement(By.xpath(".//td[3]")).getText();
			String lastname= line.findElement(By.xpath(".//td[2]")).getText();
			String email1=line.findElement(By.xpath(".//td[4]")).getText();
			String telHome=line.findElement(By.xpath(".//td[5]")).getText();
			
			ContactData contact = new ContactData()
			.withFirstName(firstname)
			.withLastName(lastname)
			.withEmail1(email1)
			.withTelHome(telHome);
			contacts.add(contact);
     	}		
		return contacts;
	}
	
	public ContactHelper createContact(ContactData contact) {
		manager.navigateTo().mainPage();
	    initContactCreation();
	    fillContactForm(contact,CREATION);
	    submitContactCreation();
	    manager.navigateTo().returnToMainPageFromContact();	
	    return this;
	}
	
	public ContactHelper modifyContact(int index, ContactData contact) {
		manager.navigateTo().mainPage();
		initEditContact(index);
		fillContactForm(contact, MODIFICATION);
		submitContactModification();
		manager.navigateTo().returnToMainPageFromContact();
		return this;
	}
	
    public ContactHelper submitContactModification() {
		confirmModification();
		manager.navigateTo().returnToMainPageFromContact();
		return this;
	}
		
	public ContactHelper submitContactRemoval() {
		confirmRemoval();	
		manager.navigateTo().returnToMainPageFromContact();
		return this;
	}
//---------------------------------------------------------------------------------	
	public String[] getMonths(){
		List<WebElement> months = driver.findElements(By.xpath("//select[2][@name='bmonth']/option[position()>1]"));
		String[] monthArr = new String[months.size()];
		int i = 0;
		if (months.size() > 0)
			{			
			for (WebElement m : months) {
				 monthArr[i] = m.getText();
		         i++;
		  	}
		}
		return monthArr;
	}

	public String[] getDays(){
		List<WebElement> days = driver.findElements(By.xpath("//select[1][@name='bday']/option[position()>1]"));
		String[] dayArr = new String[days.size()];
		int i = 0;
		if (days.size() > 0)
			{			
			for (WebElement m : days) {
				 dayArr[i] = m.getText();
		         i++;
		  	}
		}
		return dayArr;
	}
	//------------------------------------------------
	public ContactHelper initContactCreation() {
		click(By.linkText("add new"));
		return this;
	}
	
	public ContactHelper fillContactForm(ContactData contact, boolean formType) {
	    type(By.name("firstname"), contact.getFirstname());
	    type(By.name("lastname"), contact.getLastname());
	    type(By.name("address"), contact.getAddress());
	    type(By.name("home"), contact.getTelHome());
	    type(By.name("mobile"), contact.getTelMobile());
	    type(By.name("work"), contact.getTelWork());
	    type(By.name("email"), contact.getEmail1());
	    type(By.name("email2"), contact.getEmail2());	    	    
	    selectByText(By.name("bday"), contact.getBirthDay());
	    selectByText(By.name("bmonth"), contact.getBirthMonth());
	    type(By.name("byear"), contact.getBirthYear());      
	    if (formType == CREATION){
	    //selectByText(By.name("new_group"), contact.relatedGroup);
	    	} else {
	    	if (driver.findElements(By.name("new_group")).size()!=0){
	    	throw new Error ("Group selector exists in contact modification form");
	    	}
	    	}
	    type(By.name("address2"), contact.getAdressSecondary());
	    type(By.name("phone2"), contact.getTelSecondary());
	    return this;
	}

	public ContactHelper submitContactCreation() {
		click(By.name("submit"));
		return this;
	}

	public ContactHelper initEditContact(int index) {
		click(By.xpath("//tr["+ (index+2) +"]/td[7]/a/img")); // +2 because we xPath enumeration begins from 1 and we should exclude first row with no contacts 
		return this;
	}

	public void confirmRemoval() {
		click(By.xpath("//form[2]/input[2]"));
	}

	public void confirmModification() {
		click(By.xpath("//form[1]/input[11]"));
	}
}