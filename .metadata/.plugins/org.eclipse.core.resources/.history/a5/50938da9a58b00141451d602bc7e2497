package com.example.tests;

//import java.util.Collections;
//import java.util.List;
//import java.util.ArrayList;
import java.util.*;
import org.testng.annotations.Test;
import static org.testng.Assert.assertEquals;

public class GroupCreationTests extends BaseForTests {
	
 public Iterator<Object[]> randomValidGroupGenerator(){
 
   List<Object[]> list = new ArrayList<Object[]>();//Object[] произвольный массив объектов - двумерный. будет потом передаваться, как набор параметров (могут иметь произвольные типы)
   //iterator должен сгенерировать список наборов из произвольных объектов в количестве, необходимом тестовому методу
   for (int i = 0;i<5;i++) {
	  GroupData group = new GroupData();
	  group.name = generateRandomString();
	  group.header= generateRandomString();
	  group.footer= generateRandomString();	 
	  list.add(new Object[]{group});
   }
   return list.iterator();
 }
 
 public String generateRandomString(){
	 Random rnd = new Random();	
		 if(rnd.nextInt(10)==0){
		   return "";	
		 } else{
		   return "text"+rnd.nextInt();
		   }
 }	 

 
  @Test(dataProvider ="randomValidGroupGenerator")
  public void testGroupCreationWithValidData(GroupData group) throws Exception {
    app.getNavigationHelper().openMainPage();
    app.getNavigationHelper().gotoGroupPage();
  
    //save old state
    List<GroupData> oldList = app.getGroupHelper().getGroups();
    
    // actions
    app.getGroupHelper().initGroupCreation();
    app.getGroupHelper().fillGroupForm(group);
    app.getGroupHelper().submitGroupCreation();
    app.getNavigationHelper().returnToGroupsPage();
   
    //save new state
    List<GroupData> newList = app.getGroupHelper().getGroups();
   
    //compare states   
    oldList.add(group);
    Collections.sort(oldList);
    assertEquals(newList, oldList);    
  }
}

