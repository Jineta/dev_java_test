package com.example.tests;

import static org.testng.Assert.assertEquals;

import java.util.Collections;
import java.util.List;

import org.testng.annotations.Test;

public class ContactCreationTests  extends BaseForTests {
  @Test(dataProvider ="randomValidContactGenerator")
  public void testNonEmptyContactCreation() throws Exception {
	app.getNavigationHelper().openMainPage();

	
	 //save old state
    List<ContactData> oldList = app.getContactHelper().getContacts();
    
    // actions
    app.getContactHelper().initContactCreation();
	ContactData contact = new ContactData();
	contact.setFirstname("Inna");
	contact.setLastname("Domanchuk");
	contact.setAddress("address");
	contact.setTelHome("tel home");
	contact.setTelMobile("tel mob");
	contact.setTelWork("tel work");
	contact.setEmail1("jineta@ukr.net");
	contact.setEmail2("jineta2@ukr.net");
	contact.setBirthDay("30");
	contact.setBirthMonth("May");
	contact.setBirthYear("1985");
	contact.setRelatedGroup("group111");
	contact.setAdressSecondary("address secondary");
	contact.setTelSecondary("home");
	app.getContactHelper().fillContactForm(contact);
    app.getContactHelper().submitContactCreation();
    app.getNavigationHelper().returnToMainPageFromContact();
  }
  @Test(dataProvider ="randomValidGroupGenerator")
  public void testGroupCreationWithValidData(GroupData group) throws Exception {
    app.getNavigationHelper().openMainPage();
    app.getNavigationHelper().gotoGroupPage();
  
    //save old state
    List<GroupData> oldList = app.getGroupHelper().getGroups();
    
    // actions
    app.getGroupHelper().initGroupCreation();
    app.getGroupHelper().fillGroupForm(group);
    app.getGroupHelper().submitGroupCreation();
    app.getNavigationHelper().returnToGroupsPage();
   
    //save new state
    List<GroupData> newList = app.getGroupHelper().getGroups();
   
    //compare states   
    oldList.add(group);
    Collections.sort(oldList);
    assertEquals(newList, oldList);    
  }
}

}
